- hosts: postgres
  gather_facts: false
  become: true
  tasks:

    - name: Import the apt key
      ansible.builtin.get_url:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        dest: /etc/apt/keyrings/ACCC4CF8.asc

    - name: Install the repository
      ansible.builtin.apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/ACCC4CF8.asc] https://apt.postgresql.org/pub/repos/apt noble-pgdg main'
        state: present

    - name: Install PostgreSQL 17
      ansible.builtin.apt:
        name: postgresql-17
        state: present
        update_cache: true

    - name : Ensure the persistent data directory is configured
      ansible.builtin.file:
        path: "/data/postgresql"
        state: directory
        owner: "postgres"
        group: "postgres"
        mode: "0700"

    # - name: Check packaged data directory
    #   ansible.builtin.stat:
    #     path: "{{ postgres_data }}"
    #   register: datadir

    - name: Create symbolic link {{ postgres_data }}
      ansible.builtin.file:
        src: "/data/postgresql"
        dest: "{{ postgres_data }}"
        owner: "postgres"
        group: "postgres"
        state: link
      # when: not datadir.stat.exists

    - name: Initialize the database
      ansible.builtin.command: /usr/bin/pg_createcluster 17 main
      args:
        creates: "{{ postgres_data }}/17/main/PG_VERSION"

    - name: Configure PostgreSQL
      ansible.builtin.template:
        src: postgresql.conf
        dest: "{{ postgres_config }}/17/main/postgresql.conf"
        mode: '0600'
        owner: postgres
        group: postgres
      notify: Restart PostgreSQL

    - name: Copy certificates and keys
      ansible.builtin.copy:
        src: "../common/files/{{ item.file }}"
        dest: "{{ postgres_config }}/17/main/{{ item.file }}"
        mode: "{{ item.perm }}"
        owner: postgres
        group: postgres
      no_log: true
      loop:
        - { file: "{{ domain }}.crt", perm: '0644' }
        - { file: "{{ domain }}.pem", perm: '0600' }
      notify: Restart PostgreSQL

    - name: Start and enable the service
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Run localedef
      command: localedef -i en_US -f UTF-8 en_US.UTF-8
      changed_when: false

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - python3-psycopg2
          - libpq-dev
        state: present

    ############### Configure the instance ###############

    ########## Postgres user ##########
    - name: Change postgres user's password
      community.postgresql.postgresql_user:
        name: postgres
        password: "{{ postgres_pass }}"
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
    ########## Databases ##########
    - name: Create the SonarQube database
      community.postgresql.postgresql_db:
        name: "{{ sonarqube_db }}"
        comment: SonarQube database
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
    ########## pg_hba.conf ##########
    - name: Allow connections from local subnet
      community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/17/main/pg_hba.conf
        contype: hostssl
        users: "postgres"
        source: "{{ my_ip }}"
        databases: "postgres,{{ sonarqube_db }}"
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      notify: Restart PostgreSQL
    - meta: flush_handlers

    ############### Roles ###############

    ########## SonarQube ##########
    - name : Create the SonarQube user
      community.postgresql.postgresql_user:
        name: "{{ sonarqube_user }}"
        password: "{{ sonarqube_pass }}"
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
    - name: GRANT ALL PRIVILEGES ON DATABASE {{ sonarqube_db }} TO {{ sonarqube_user }}
      community.postgresql.postgresql_privs:
        login_db: postgres
        privs: "ALL"
        type: "database"
        obj: "{{ sonarqube_db }}"
        role: "{{ sonarqube_user }}"
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      notify: Reload PostgreSQL
    - name: GRANT ALL PRIVILEGES ON SCHEMA public TO {{ sonarqube_user }}
      community.postgresql.postgresql_privs:
        login_db: "{{ sonarqube_db }}"
        privs: ALL
        type: schema
        objs: public
        role: "{{ sonarqube_user }}"
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      notify: Reload PostgreSQL
    - name: Allow connections for SonarQube user (localhost)
      community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/17/main/pg_hba.conf
        contype: hostssl
        users: "{{ sonarqube_user }}"
        source: "127.0.0.1"
        databases: sonarqube
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      notify: Reload PostgreSQL
    - name: Allow connections for SonarQube user
      community.postgresql.postgresql_pg_hba:
        dest: /etc/postgresql/17/main/pg_hba.conf
        contype: hostssl
        users: "{{ sonarqube_user }}"
        source: "{{ my_ip }}"
        databases: sonarqube
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      notify: Reload PostgreSQL

  vars:
    domain: sreafterhours.dev
    postgres_data: /var/lib/postgresql
    postgres_config: /etc/postgresql
    postgres_pass: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      64333632346432383932356565386161376331636539383535633532366633333761636261363864
      3965626338303332393935623466323531633065616562640a346434633635396266353963343030
      38373861666264663631386331346631643137663936626239333739336538663037613638393762
      3430323734663865660a666462646465326434623761353937343963376237313234643436626236
      3732
    sonarqube_db: "sonarqube"
    sonarqube_user: "sonarqube"
    sonarqube_pass: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      30323662666564326563663432613738666538376238303234333962633430656639653033393636
      3665666563646436323631366463316238353233363664360a336136386630353466333633636466
      66613166633037313236343365313736346166373135353161633531303533646365666539316435
      3936393539353530360a376463393666633962366565396531313538323335393431316138613830
      6266
    my_ip: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      61336163313630383533626164393165363330353136623931323832303038356431366533333965
      6463386363336664353861373039353836346233633434650a383534633630633636383166643537
      31646135373764623138616664306535313265616438616364656238356565353162393734333161
      3265383137313737630a333661643135333233636164383637356564663735653263363161373866
      61396438333365323235636266663136626331623431643661613336323935653731

  handlers:

    - name: Restart PostgreSQL
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
      when: not ansible_check_mode

    - name: Reload PostgreSQL
      ansible.builtin.systemd:
        name: postgresql
        state: reloaded
      when: not ansible_check_mode
